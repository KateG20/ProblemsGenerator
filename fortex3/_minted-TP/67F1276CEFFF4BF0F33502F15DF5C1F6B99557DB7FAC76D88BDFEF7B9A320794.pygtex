\begin{Verbatim}[commandchars=\\\{\}]
using System;
using System.Diagnostics;
using System.IO;
using HtmlAgilityPack;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ProblemGenerator
\PYGZob{}
    public static class HTMLWriter
    \PYGZob{}
        public static void WriteHTML(string[,] problems)
        \PYGZob{}
            // Добываем путь к файлу, в который будем записывать

            string docpath = Environment.GetFolderPath(Environment.SpecialFolder.MyDoc‌​uments);
            string path = Path.Combine(docpath, \PYGZdq{}task26.html\PYGZdq{});
            int count = 1;

            // При существовании файла создаем новый, а не перезаписываем
            while (File.Exists(path))
            \PYGZob{}
                path = Path.Combine(docpath, \PYGZdl{}\PYGZdq{}task26(\PYGZob{}count++\PYGZcb{}).html\PYGZdq{});
            \PYGZcb{}

            // Добываем текст из шаблона и записываем его в файл
            string baseText = File.ReadAllText(\PYGZdq{}../../HtmlTemplate.txt\PYGZdq{});
            File.WriteAllText(path, baseText, Encoding.UTF8);

            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
            doc.Load(path);
            HtmlNode body = doc.DocumentNode.SelectSingleNode(\PYGZdq{}//html/body\PYGZdq{}),
                task, button, input1, input2, answer, span;

            // Проходимся по каждой задаче из списка
            for (int i = 0; i \PYGZlt{}= problems.GetUpperBound(1); i++)
            \PYGZob{}
                // Создаем тег для условия задачи и записываем его
                task = doc.CreateElement(\PYGZdq{}p\PYGZdq{});
                task.InnerHtml = problems[0, i];
                body.AppendChild(task);
                button = doc.CreateElement(\PYGZdq{}p\PYGZdq{});

                // Создаем два тега для кнопочек, записываем туда атрибуты
                input1 = doc.CreateElement(\PYGZdq{}input\PYGZdq{});
                input1.SetAttributeValue(\PYGZdq{}class\PYGZdq{}, \PYGZdq{}colored\PYGZdq{});
                input1.SetAttributeValue(\PYGZdq{}type\PYGZdq{}, \PYGZdq{}button\PYGZdq{});
                input1.SetAttributeValue(\PYGZdq{}value\PYGZdq{}, \PYGZdq{}Решение\PYGZdq{});
                input1.SetAttributeValue(\PYGZdq{}onclick\PYGZdq{}, \PYGZdl{}\PYGZdq{}showAnswer(\PYGZsq{}\PYGZob{}problems[1, i]\PYGZcb{}\PYGZsq{}, \PYGZsq{}answer\PYGZob{}i\PYGZcb{}\PYGZsq{})\PYGZdq{});
                button.AppendChild(input1);

                input2 = doc.CreateElement(\PYGZdq{}input\PYGZdq{});
                input2.SetAttributeValue(\PYGZdq{}class\PYGZdq{}, \PYGZdq{}colored\PYGZdq{});
                input2.SetAttributeValue(\PYGZdq{}type\PYGZdq{}, \PYGZdq{}button\PYGZdq{});
                input2.SetAttributeValue(\PYGZdq{}value\PYGZdq{}, \PYGZdq{}Спрятать решение\PYGZdq{});
                input2.SetAttributeValue(\PYGZdq{}onclick\PYGZdq{}, \PYGZdl{}\PYGZdq{}hideAnswer(\PYGZsq{}answer\PYGZob{}i\PYGZcb{}\PYGZsq{})\PYGZdq{});
                button.AppendChild(input2);

                // Добавляем кнопочки в body
                body.AppendChild(button);

                // Создаем тег для ответа и записываем
                answer = doc.CreateElement(\PYGZdq{}p\PYGZdq{});
                span = doc.CreateElement(\PYGZdq{}span\PYGZdq{});
                span.SetAttributeValue(\PYGZdq{}id\PYGZdq{}, \PYGZdl{}\PYGZdq{}answer\PYGZob{}i\PYGZcb{}\PYGZdq{});
                answer.AppendChild(span);
                body.AppendChild(answer);
            \PYGZcb{}
            doc.Save(path);

            // Открываем страницу в браузере
            Process.Start(new ProcessStartInfo(path) \PYGZob{} UseShellExecute = true \PYGZcb{});
        \PYGZcb{}
    \PYGZcb{}
\PYGZcb{}
\end{Verbatim}
